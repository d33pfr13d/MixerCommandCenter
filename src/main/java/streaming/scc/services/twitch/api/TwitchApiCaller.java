package streaming.scc.services.twitch.api;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

import javax.ws.rs.core.Response;

import org.glassfish.jersey.client.ClientConfig;
import org.glassfish.jersey.client.JerseyClient;
import org.glassfish.jersey.client.JerseyClientBuilder;
import org.glassfish.jersey.client.JerseyInvocation.Builder;
import org.glassfish.jersey.client.JerseyWebTarget;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import streaming.scc.services.twitch.api.json.users.UserProfile;

/**
 * Service to retrive data from Twitch API
 * 
 * Json objects generated by http://www.jsonschema2pojo.org/
 * 
 * TODO not sure if we need to revalidate our authorization and aqcquire a fresh
 * client id from time to time. For starters I'm gonna try to simply configure
 * both access token and client id.
 * 
 */
public class TwitchApiCaller {

	private TwitchApiSettings apiSettings = new TwitchApiSettings();

	private JerseyClient client;

	public TwitchApiCaller() {
		client = JerseyClientBuilder.createClient(new ClientConfig());
	}

	/**
	 * Retrieves the profile image of a twitch user and stores that localy returning
	 * a file object to the localy cached image.
	 * 
	 * @param userName
	 * @return imageFile
	 * @throws IOException
	 */
	public File getProfileImage(String userName) {
		try {
			UserProfile userData = getUserData(userName);

			if (userData.getData() != null && userData.getData().size() > 0) {
				String profileImgUrl = userData.getData().get(0).getProfileImageUrl();
				System.out.println(profileImgUrl);

				JerseyWebTarget webTarget = client.target(profileImgUrl);
				Builder invocationBuilder = webTarget.request();
				Response response = invocationBuilder.get();
				System.out.println(response.getStatus());
				if (Response.Status.OK.getStatusCode() == response.getStatus()) {
					InputStream is = response.readEntity(InputStream.class);
					File downloadfile = new File("./twitchProfiles/" + userName + ".png");
					Files.copy(is, downloadfile.toPath(), StandardCopyOption.REPLACE_EXISTING);
					return downloadfile;
				}
			}

		} catch (IOException e) {
			System.err.println("Could not retrieve profile image: "+e.getMessage());
			throw new RuntimeException(e);
		}
		
		
		return null;
	}

	public UserProfile getUserData(String userName) throws JsonProcessingException, JsonMappingException {

		JerseyWebTarget webTarget = client.target("https://api.twitch.tv/helix/users?login=" + userName);
		Builder invocationBuilder = webTarget.request();
		invocationBuilder.accept(javax.ws.rs.core.MediaType.APPLICATION_JSON);
		invocationBuilder.header("Authorization", "Bearer " + apiSettings.getAccessToken());
		invocationBuilder.header("Client-Id", apiSettings.getClientId());
		Response response = invocationBuilder.get();
		System.out.println(response.getStatus());
//		System.out.println(response.toString());

		String body = invocationBuilder.get(String.class);
		System.out.println(body);

		ObjectMapper mapper = new ObjectMapper();
		UserProfile userData = mapper.readValue(body, UserProfile.class);
//		System.out.println(userData);

		return userData;
	}

	/**
	 * Test
	 * 
	 * @param args
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException {

		System.out.println(new TwitchApiCaller().getProfileImage("brentarus"));

		System.out.println(new TwitchApiCaller().getProfileImage("Beevsaknosp"));

		System.out.println(new TwitchApiCaller().getProfileImage("MrxGamers"));

	}

}
